#!/usr/bin/env python

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See LICENSE for more details.

"""This module Plays audio playback / record on guest and detect any pauses in
the audio stream.

Requirements for host machine
-----------------------------

- sox RPM.

Requirements for client & guest
-------------------------------

- aplay, part of the alsa-utils.
- arecord, part of the alsa-utils.

Scenario
--------

Guest or client plays a chunk of WAV file. Other side records. Recorded file is
examined for pauses.

 * record test - client plays.
 * playback test - guest plays.

Expected specimen
-----------------

http://linguistics.berkeley.edu/plab/guestwiki/index.php?title=Sox_in_phonetic_research

$ sox --info tone.wav

Input File     : 'tone.wav'
Channels       : 1
Sample Rate    : 44100
Precision      : 16-bit
Duration       : 00:06:40.00 = 17640000 samples = 30000 CDDA sectors
File Size      : 35.3M
Bit Rate       : 706k
Sample Encoding: 16-bit Signed Integer PCM

To generate such file:

$ sox -b 16 -r 44100 --null -c 1 sine1000.wav synth '06:40.00' sine 800

To examine:

$ sox sine1000.wav -n spectrogram

"""

import logging
import commands
import time
import aexpect
from distutils import util
from avocado.core import exceptions
from virttest import utils_misc
from spice.lib import rv_session

SPECIMEN_FILE = "specimen.wav"
"""Autogenerated wav file servers as a specimen for tests."""

RECORDED_FILE = "recorded.wav"
"""Recorded audio."""

SOX_CMD = "sox -b 16 -r 44100 --null -c 1 %s synth '06:40.00' sine 800" %\
    SPECIMEN_FILE
"""Command to generate WAV file."""


def verify_recording(rec_f, config):
    """Tests whether something was actually recorded. Threshold is a number of
    bytes which have to be zeros, in order to record an unacceptable pause.
    11000 bytes is ~ 0.06236s at 44100 Hz sampling, 16 bit depth and stereo.

    Parameters
    ----------
    rec_f: str
        Path to recorded wav file.
    config: spice.lib.Params
        Dictionary with the test parameters.

    Returns
    -------
    bool
        True if successful, False otherwise.
    """
    disable_audio = config.disable_audio
    threshold = config.rv_audio_threshold
    config_test = config.config_test
    rec = open(rec_f).read()
    if len(rec) - rec.count('\0') < 50:
        logging.info("Recording is empty")
        if not util.strtobool(disable_audio):
            return False
        else:
            return True
    pauses = []
    pause = False
    try:
        for index, value in enumerate(rec):
            if value == '\0':
                if not pause:
                    pauses.append([index])
                    pause = True
            else:
                if pause:
                    pauses[-1].append(index - 1)
                    pause = False
                    if (pauses[-1][1] - pauses[-1][0]) < threshold:
                        pauses.pop()
        if len(pauses):
            logging.error("%d pauses detected:", len(pauses))
            for i in pauses:
                start = float(i[0]) / (2 * 2 * 44100)
                duration = float(i[1] - i[0]) / (2 * 2 * 44100)
                logging.info("start: %10fs, duration: %10fs", start, duration)
            # Two small hiccups are allowed when migrating
            if len(pauses) < 3 and config_test == "migration":
                return True
            else:
                return False
        else:
            logging.info("No pauses detected")
    except IndexError:
        # Too long pause, overflow in index
        return False
    return True


def run(test, params, env):
    """Playback of audio stream tests for remote-viewer.

    Parameters
    ----------
    test : avocado.core.plugins.vt.VirtTest
        QEMU test object.
    params : virttest.utils_params.Params
        Dictionary with the test parameters.
    env : virttest.utils_env.Env
        Dictionary with test environment.

    Raises
    ------
    TestFail
        Test fails for expected behaviour.

    """
    logging.info("Start test %s", test.name)
    session = rv_session.RvSession(params, env)
    session.clear_interface_all()
    session.connect()
    if not session.is_connected():
        raise exceptions.TestFail("Failed to establish rv connection.")
    # RM : audio_src = session.cfg.audio_src
    audio_tgt = session.cfg.audio_tgt
    config_test = session.cfg.config_test
    timeout = int(session.cfg.login_timeout)
    ret, out = commands.getstatusoutput(SOX_CMD)
    if ret:
        raise exceptions.TestFail("Cannot generate specimen WAV file: %s" % out)
    if util.strtobool(session.cfg.rv_record):
        logging.info("Testing recording.")
        player = session.client_session
        recorder = session.guest_session
        session.client_vm.copy_files_to(SPECIMEN_FILE, audio_tgt)
        vm_recorder = session.guest_vm
    else:
        logging.info("Testing playback.")
        player = session.guest_session
        recorder = session.client_session
        session.guest_vm.copy_files_to(SPECIMEN_FILE, audio_tgt)
        vm_recorder = session.client_vm
    cmd = "aplay %s &> /dev/null &" % audio_tgt
    player.cmd(cmd, timeout=30)
    if config_test == "migration":
        bguest = utils_misc.InterruptedThread(session.guest_vm.migrate,
                                              kwargs={})
        bguest.start()
    cmd = "arecord -l -L"
    out = recorder.cmd(cmd, timeout=500)
    logging.info("List of rec devices: %s", out)
    try:
        cmd = "arecord -d %s -f cd -D hw:0,1 %s" % (
            session.cfg.audio_time,
            session.cfg.audio_rec)
        recorder.cmd(cmd, timeout=500)
    except aexpect.ShellCmdError as e:
        logging.info("cmd failed with: %s", e)
        time.sleep(10000)
        raise exceptions.TestFail("Test failed")
    if config_test == "migration":
        bguest.join()
    vm_recorder.copy_files_from(session.cfg.audio_rec, RECORDED_FILE)
    if not verify_recording(RECORDED_FILE, session.cfg):
        raise exceptions.TestFail("Test failed")
